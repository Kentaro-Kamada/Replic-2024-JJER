[
  {
    "objectID": "05_教育学研究/本文.html",
    "href": "05_教育学研究/本文.html",
    "title": "再現コード",
    "section": "",
    "text": "04_script/変数ラベル値ラベル作成.qmd\n\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(kamaken)\n\n\n# データ読み込み\nresult &lt;- \n  tibble(\n    year = c(1993, 1991, 1992, 1994:2019),\n    path = list.files('01_rawdata/生協調査', full.names = T),\n    enc = c(rep('cp932', 22), \n            'utf-8', 'utf-8', 'cp932', 'cp932', 'cp932', 'utf-8', 'cp932'),\n    data = map2(path, enc, ~read_sav(.x, encoding = .y))\n  )\n\n# ラベルの作成\nlabel &lt;- \n  result %&gt;% \n  mutate(\n    varlab = map(data, haven_variable_label),\n    vallab = map(data, haven_value_label)\n  )\n\n\n# 書き出し\nlabel %&gt;% \n  select(year, varlab) %&gt;% \n  unnest(varlab) %&gt;% \n  write_excel_csv('02_middle/varlab.csv')\n  \n\nlabel %&gt;% \n  select(year, vallab) %&gt;% \n  unnest(vallab) %&gt;% \n  write_excel_csv('02_middle/vallab.csv')\n\n\n\n\n\n\n\n\n04_script/大学コード処理.qmd\n\nlibrary(tidyverse)\nlibrary(kamaken)\n\n\n# 変数ラベル・値ラベル\nvarlab &lt;- read_csv('02_middle/varlab.csv')\nvallab &lt;- read_csv('02_middle/vallab.csv')\n\n\n# 各年度の大学名と値の対応表\ndaigaku &lt;- \n  vallab %&gt;% \n  filter(str_detect(変数, '(UNV|大学|daigaku)'))\n\n# 大学名のリコードに使う正規表現\ndaigaku_regex &lt;- readxl::read_excel('01_input/大学名リコードregex.xlsx')\n\n\n# 問題点は同じ大学でも年度によってコードが違う点と，年度によってラベルの表記に揺れがある点\n# まずは表記揺れを直す\n\ndaigaku %&gt;% \n  mutate(\n    ラベル = \n      # unicode正規化（括弧や全角半角を統一）\n      stringi::stri_trans_nfkc(ラベル) %&gt;%\n      # 半角括弧を除く\n      str_remove_all('[\\\\(\\\\)]') %&gt;% \n      # hogehoge短大をhogehoge短期大学に変換\n      str_replace('短大', '短期大学') %&gt;% \n      # hogehoge大をhogehoge大学に変換\n      str_replace('大$', '大学') \n    ) %&gt;% \n  mutate(\n    ラベル =      \n      # 個別の大学の表記の統一\n      str_replace_all(ラベル, set_names(daigaku_regex$new, daigaku_regex$old))\n  ) %&gt;% \n  select(-変数) %&gt;% \n  # 年度・値・ラベルの対応表を出力\n  write_excel_csv('02_middle/年度別大学コード.csv')\n\n\n\n\n\n\n\n\n04_script/データ前処理.qmd\n\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(kamaken)\n\n# データ読み込み -------------------------------------------------------------------------------------\n# 30年分のデータを読み込み（年度でネストしておく）\ndata_list &lt;- \n  tibble(\n    year = c(1993, 1991, 1992, 1994:2019),\n    path = list.files('01_rawdata/生協調査', full.names = T),\n    # 年によってデータの文字コードが違うので注意\n    enc = c(rep('cp932', 22), \n            'utf8', 'utf8', 'cp932', 'cp932', \n            'cp932', 'utf8', 'cp932'),\n    data = map2(path, enc, ~read_sav(.x, encoding = .y))\n  ) |&gt; \n  select(year, data)\n\n# 変数名の対応表を読み込み（年度でネストしておく）\nrename_list &lt;-\n  read_csv('01_input/rename_list.csv') |&gt; \n  pivot_longer(cols = -new, names_to = 'year', values_to = 'old', \n               names_transform = list(year = parse_integer)) |&gt; \n  drop_na() |&gt; \n  nest(namelist = c(-year))\n\n# 変数ラベル・値ラベル\nvarlab &lt;- read_csv('02_middle/varlab.csv')\nvallab &lt;- read_csv('02_middle/vallab.csv')\n\n\n# 前処理 -----------------------------------------------------------------------------------------\n# データセットと対応表をくっつける\ndata &lt;-\n  inner_join(\n    data_list,\n    rename_list,\n    by = 'year'\n  ) |&gt; \n  # 変数選択＆リネーム\n  mutate(data = map2(data, namelist, ~select(.x, set_names(.y$old, .y$new)))) |&gt; \n  # ラベルをはがす\n  mutate(data = map(data, zap_labels)) |&gt; \n  select(year, data) |&gt; \n  unnest(data) |&gt; \n  # idを振る\n  mutate(id = row_number()) |&gt; \n  relocate(year, id)\n\n\n# 大学コード ---------------------------------------------------------------------------------------\n# 大学コード読み込み\ndaigaku_code &lt;- read_csv('02_middle/年度別大学コード.csv')\n\n\ndf1 &lt;-\n  left_join(data, daigaku_code, by = c('year', '大学コード' = '値')) |&gt; \n  # 大学のラベルを大学名にリコード，位置調整\n  relocate(year, id, 大学名 = ラベル) |&gt; \n  # いらなくなった大学コードを削除\n  select(!大学コード)\n\n\n# 年収 ----------------------------------------------------------------------------------\n# 年によって年収のコーディングの仕方が異なる\n# 1991〜2002までは実数値，2003は500万〜1500万のカテゴリ，2004〜は0〜1500万のカテゴリ，ただし2008〜2015は値が21〜29という謎仕様になっているので注意\n\n# 2015年までは父母の職業と年収を聞いているが，2016年からは主な家計支持者は職業と年収およびその他家族の年収を聞くようになった\n# 父母のうち年収の高い方を主な家計支持者とみなし，2016年以降のフォーマットにそろえる\n\ndf2 &lt;-\n  df1 |&gt; \n  # select(year, id, matches('(_年収|_職業)$'),) |&gt; \n  pivot_longer(cols = matches('(_年収|_職業)$'), names_to = c('who', '.value'), names_sep = '_') |&gt; \n  # 年によって聞き方が異なる\n  # 無回答・わからないを0にコード，あとは2003年のカテゴリに合わせる\n  mutate(\n    年収 = \n      case_when(\n        year %in% 1991:2002 & (年収 == 9999 | is.na(年収)) ~ 0,\n        year %in% 1991:2002 & 年収 &lt; 500 ~ 1,\n        year %in% 1991:2002 & 年収 &gt;= 500 & 年収 &lt; 750 ~ 2,\n        year %in% 1991:2002 & 年収 &gt;= 750 & 年収 &lt; 1000 ~ 3,\n        year %in% 1991:2002 & 年収 &gt;= 1000 & 年収 &lt; 1500 ~ 4,\n        year %in% 1991:2002 & 年収 &gt;= 1500 ~ 5,\n        year == 2003 & (年収 == 6 | 年収 == 9 | is.na(年収)) ~ 0,\n        year == 2003 & 年収 == 1 ~ 1,\n        year == 2003 & 年収 == 2 ~ 2,\n        year == 2003 & 年収 == 3 ~ 3,\n        year == 2003 & 年収 == 4 ~ 4,\n        year == 2003 & 年収 == 5 ~ 5,\n        year %in% c(2004:2007, 2016:2020) & (年収 == 9 | 年収 == 99 | is.na(年収)) ~ 0,\n        year %in% c(2004:2007, 2016:2020) & 年収 %in% 1:4 ~ 1,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 5 ~ 2,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 6 ~ 3,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 7 ~ 4,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 8 ~ 5,\n        year %in% 2008:2015 & (年収 == 29 | 年収 == 99 | is.na(年収)) ~ 0,\n        year %in% 2008:2015 & 年収  %in%  21:24 ~ 1,\n        year %in% 2008:2015 & 年収 == 25 ~ 2,\n        year %in% 2008:2015 & 年収 == 26 ~ 3,\n        year %in% 2008:2015 & 年収 == 27 ~ 4,\n        year %in% 2008:2015 & 年収 == 28 ~ 5,\n        TRUE ~ NA_real_),\n    職業 = \n      case_when(\n        year %in% 1991:2003 & 職業 == 1 ~ '公務員非管理職',\n        year %in% 1991:2003 & 職業 == 2 ~ '公務員管理職',\n        year %in% 1991:2003 & 職業 == 3 ~ '中小企業非管理職',\n        year %in% 1991:2003 & 職業 == 4 ~ '中小企業管理職',\n        year %in% 1991:2003 & 職業 == 5 ~ '大企業非管理職',\n        year %in% 1991:2003 & 職業 == 6 ~ '大企業管理職',\n        year %in% 1991:2003 & 職業 == 7 ~ '団体役員・職員・私立学校教職員',\n        year %in% 1991:2003 & 職業 == 8 ~ '中小企業経営者',\n        year %in% 1991:2003 & 職業 == 9 ~ '自営業',\n        year %in% 1991:2003 & 職業 == 10 ~ '農林水産業',\n        year %in% 1991:2003 & 職業 == 11 ~ '自由業',\n        year %in% 1991:2003 & 職業 == 12 ~ 'その他職業',\n        year %in% 1991:2003 & 職業 == 13 ~ '年金金利生活者',\n        year %in% 1991:2003 & 職業 == 14 ~ '無職',\n        year %in% 1991:2003 & 職業 == 15 ~ 'パート',\n        year %in% 1991:2003 & (職業 == 99 | is.na(職業)) ~ '無回答',\n        year %in% 2004:2020 & 職業 == 1 ~ '公務員非管理職',\n        year %in% 2004:2020 & 職業 == 2 ~ '公務員管理職',\n        year %in% 2004:2020 & 職業 == 3 ~ '中小企業非管理職',\n        year %in% 2004:2020 & 職業 == 4 ~ '中小企業管理職',\n        year %in% 2004:2020 & 職業 == 5 ~ '大企業非管理職',\n        year %in% 2004:2020 & 職業 == 6 ~ '大企業管理職',\n        year %in% 2004:2020 & 職業 == 7 ~ '団体役員・職員・私立学校教職員',\n        year %in% 2004:2020 & 職業 == 8 ~ '中小企業経営者',\n        year %in% 2004:2020 & 職業 == 9 ~ '自営業',\n        year %in% 2004:2020 & 職業 == 10 ~ '農林水産業',\n        year %in% 2004:2020 & 職業 == 11 ~ '自由業',\n        year %in% 2004:2020 & 職業 == 12 ~ 'その他職業',\n        year %in% 2004:2020 & 職業 == 13 ~ 'パート',\n        year %in% 2004:2020 & 職業 == 14 ~ '年金金利生活者',\n        year %in% 2004:2020 & 職業 == 15 ~ '無職',\n        year %in% 2004:2020 & (職業 == 99 | is.na(職業)) ~ '無回答',\n        TRUE ~ NA_character_\n      )) |&gt; \n  pivot_wider(names_from = who, names_glue = '{who}_{.value}', values_from = c(職業, 年収)) |&gt; \n  # 父と母で年収カテゴリの高い方を主な家計支持者とする\n  mutate(\n    家計支持者 = \n      case_when(\n        year %in% 1991:2015 & 父_年収 &gt;= 母_年収 ~ '父',\n        year %in% 1991:2015 & 母_年収 &gt; 父_年収 ~ '母',\n        TRUE ~ '主な家計支持者'),\n    親年収 = \n      case_when(\n        家計支持者 == '父' ~ 父_年収,\n        家計支持者 == '母' ~ 母_年収,\n        TRUE ~ 主な家計支持者_年収),\n    親職業 = \n      case_when(\n        家計支持者 == '父' ~ 父_職業,\n        家計支持者 == '母' ~ 母_職業,\n        TRUE ~ 主な家計支持者_職業),\n  ) |&gt; \n  # カテゴリ化\n  mutate(\n    親年収 = factor(\n      親年収, levels = 0:5, \n      labels = c('わからない・無回答', '500万未満', '500万-749万', '750万-999万', '1000万-1499万', '1500万以上')\n    ),\n    親職業 = factor(親職業) |&gt; fct_relevel('大企業管理職')\n  ) |&gt; \n  # いらない変数削除\n  select(!c(matches('^(父|母|主な家計支持者|その他家族)_(年収|職業)$'), 家計支持者))\n\n\n\n# そのほかの変数のリコード --------------------------------------------------------------------------------\n\n\ndf3 &lt;-\n  df2 |&gt; \n  # 変数のリコード\n  mutate(\n    学部 = \n      case_when(\n        学部 == 1 ~ '文科系',\n        学部 == 2 ~ '理科系',\n        学部 == 3 ~ '医歯薬系',\n        学部 == 4 ~ 'その他',\n        TRUE ~ NA_character_\n      ) |&gt; fct_infreq(),\n    入試形態 = \n      case_when(\n        入試形態 == 1 ~ '一般入試',\n        year %in% 1991:2002 & 入試形態 == 3 ~ '内部進学',\n        year == 2003 & 入試形態 == 7 ~ '内部進学',\n        year %in% 2004:2019 & 入試形態 == 4 ~ '内部進学',\n        year == 2020 & 入試形態 == 3 ~ '内部進学',\n        year %in% 1991:2002 & 入試形態 == 2 ~ '推薦入試',\n        year == 2003 & 入試形態 %in% c(2, 3, 5, 6) ~ '推薦入試',\n        year %in% 2004:2019 & 入試形態 %in% c(2, 3, 5, 6) ~ '推薦入試',\n        year == 2020 & 入試形態 %in% c(2, 4, 5, 6) ~ '推薦入試',\n        year %in% 1991:2002 & 入試形態 == 4 ~ 'その他',\n        year == 2003 & 入試形態 %in% c(4, 8, 9, 10, 11, 12) ~ 'その他',\n        year %in% 2004:2019 & 入試形態 %in% c(7, 8, 9, 10, 11) ~ 'その他',\n        year == 2020 & 入試形態 %in% c(7, 8, 9, 10, 11) ~ 'その他',\n        TRUE ~ NA_character_\n      ) |&gt; fct_infreq(),\n    学年 = \n      case_when(\n        year %in% 1991:2015 & 学年 == 1 ~ '1年',\n        year %in% 1991:2015 & 学年 == 2 ~ '2年',\n        year %in% 1991:2015 & 学年 == 3 ~ '3年',\n        year %in% 1991:2015 & 学年 == 4 ~ '4年以上',\n        year %in% 2016:2020 & 学年 == 1 ~ '1年',\n        year %in% 2016:2020 & 学年 == 2 ~ '2年',\n        year %in% 2016:2020 & 学年 == 3 ~ '3年',\n        year %in% 2016:2020 & 学年 %in% 4:6 ~ '4年以上',\n        TRUE ~ NA_character_\n      ) |&gt; factor(),\n    性別 = \n      case_when(\n        year %in% 1991:2017 & 性別 %in% 1:2 ~ '男性',\n        year %in% 1991:2017 & 性別 %in% 3:4 ~ '女性',\n        year %in% 2018:2020 & 性別 == 1 ~ '男性',\n        year %in% 2018:2020 & 性別 == 2 ~ '女性',\n        TRUE ~ NA_character_\n      ) |&gt; fct_relevel('男性'),\n    大学生活重点 = \n      case_when(\n        大学生活重点 == 1 ~ '勉強や研究',\n        大学生活重点 == 2 ~ 'サークル',\n        大学生活重点 == 3 ~ '趣味',\n        大学生活重点 == 4 ~ '人間関係',\n        大学生活重点 == 5 ~ '資格取得',\n        大学生活重点 == 6 ~ 'アルバイト',\n        大学生活重点 == 7 ~ '重点なくほどほど',\n        大学生活重点 == 8 ~ 'なんとなくすぎる生活',\n        year != 2020 & 大学生活重点 == 9 ~ 'その他',\n        year == 2020 & 大学生活重点 == 9 ~ NA_character_,\n        大学生活重点 == 10 ~ 'その他',\n        TRUE ~ NA_character_) |&gt; \n      fct_infreq(),\n    across(\n      c(大学選択理由_1, 大学選択理由_2),\n      ~{case_when(\n        . == 1 ~ '学びたい専門がある',\n        . == 2 ~ '学力にあっている',\n        . == 3 ~ '雰囲気が合っていそう',\n        . == 4 ~ '通学に便利',\n        . == 5 ~ '有名',\n        . == 6 ~ '就職に有利',\n        . == 7 ~ '学費が安い',\n        . == 8 ~ 'ここしか受からなかった',\n        between(year, 2004, 2006) & . == 9 ~ 'その他',\n        between(year, 2007, 2020) & . == 9 ~ '附属高校に通っていた',\n        between(year, 2004, 2006) & . == 10 ~ NA_character_,\n        between(year, 2007, 2020) & . == 10 ~ '家族などのすすめ',\n        between(year, 2007, 2019) & . == 11 ~ 'その他',\n        year == 2020 & . == 11 ~ 'スポーツができる',\n        year == 2020 & . == 12 ~ 'その他',\n        TRUE ~ NA_character_\n      )}\n    ),\n    アルバイト経験 = case_when(\n      year %in% 2005:2020 & アルバイト経験 == 2 ~ 'なし',\n      year %in% 1991:2004 & アルバイト経験 == 0 ~ 'なし',\n      アルバイト経験 == 1 ~ 'あり',\n      .default = NA\n    ),\n    奨学金収入 = case_when(\n      year %in% 1991:2017 ~ 奨学金収入 / 100,\n      year %in% 2018:2020 ~ 奨学金収入 / 10000,\n      .default = NA\n    ),\n    奨学金有無 = case_when(\n      奨学金収入 == 0 ~ '受給なし',\n      is.na(奨学金収入) ~ NA,\n      .default = '受給あり'\n    ) |&gt; fct_relevel('受給なし', '受給あり'),\n    across(\n      c(自習時間_大学_分, 自習時間_大学以外_分),\n      ~{case_when(\n        year %in% 2014:2020 & between(., 0, 59) ~ .,\n        year %in% 2012:2013 ~ .,\n        TRUE ~ NA_real_)}\n    ),\n    across(\n      c(自習時間_大学_時, 自習時間_大学以外_時),\n      ~{case_when(\n        year %in% 2014:2020 & . != 999 ~ .,\n        year %in% 2012:2013 ~ .,\n        TRUE ~ NA_real_)}\n    ),\n    自習時間_大学 = \n      case_when(\n        year %in% 2012:2013 ~ 自習時間_大学_分,\n        year %in% 2014:2020 ~ 自習時間_大学_時*60 + 自習時間_大学_分,\n        TRUE ~ NA_real_\n      ),\n    自習時間_大学以外 = \n      case_when(\n        year %in% 2012:2013 ~ 自習時間_大学以外_分,\n        year %in% 2014:2020 ~ 自習時間_大学以外_時*60 + 自習時間_大学以外_分,\n        TRUE ~ NA_real_\n      )\n  ) |&gt; \n  select(!c(自習時間_大学_分:自習時間_大学以外_時))\n\n# 保存\nwrite_rds(df3, '02_middle/corp.rds')"
  },
  {
    "objectID": "05_教育学研究/本文.html#変数ラベル値ラベルのリストを作成",
    "href": "05_教育学研究/本文.html#変数ラベル値ラベルのリストを作成",
    "title": "再現コード",
    "section": "",
    "text": "04_script/変数ラベル値ラベル作成.qmd\n\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(kamaken)\n\n\n# データ読み込み\nresult &lt;- \n  tibble(\n    year = c(1993, 1991, 1992, 1994:2019),\n    path = list.files('01_rawdata/生協調査', full.names = T),\n    enc = c(rep('cp932', 22), \n            'utf-8', 'utf-8', 'cp932', 'cp932', 'cp932', 'utf-8', 'cp932'),\n    data = map2(path, enc, ~read_sav(.x, encoding = .y))\n  )\n\n# ラベルの作成\nlabel &lt;- \n  result %&gt;% \n  mutate(\n    varlab = map(data, haven_variable_label),\n    vallab = map(data, haven_value_label)\n  )\n\n\n# 書き出し\nlabel %&gt;% \n  select(year, varlab) %&gt;% \n  unnest(varlab) %&gt;% \n  write_excel_csv('02_middle/varlab.csv')\n  \n\nlabel %&gt;% \n  select(year, vallab) %&gt;% \n  unnest(vallab) %&gt;% \n  write_excel_csv('02_middle/vallab.csv')"
  },
  {
    "objectID": "05_教育学研究/本文.html#大学コードの整理",
    "href": "05_教育学研究/本文.html#大学コードの整理",
    "title": "再現コード",
    "section": "",
    "text": "04_script/大学コード処理.qmd\n\nlibrary(tidyverse)\nlibrary(kamaken)\n\n\n# 変数ラベル・値ラベル\nvarlab &lt;- read_csv('02_middle/varlab.csv')\nvallab &lt;- read_csv('02_middle/vallab.csv')\n\n\n# 各年度の大学名と値の対応表\ndaigaku &lt;- \n  vallab %&gt;% \n  filter(str_detect(変数, '(UNV|大学|daigaku)'))\n\n# 大学名のリコードに使う正規表現\ndaigaku_regex &lt;- readxl::read_excel('01_input/大学名リコードregex.xlsx')\n\n\n# 問題点は同じ大学でも年度によってコードが違う点と，年度によってラベルの表記に揺れがある点\n# まずは表記揺れを直す\n\ndaigaku %&gt;% \n  mutate(\n    ラベル = \n      # unicode正規化（括弧や全角半角を統一）\n      stringi::stri_trans_nfkc(ラベル) %&gt;%\n      # 半角括弧を除く\n      str_remove_all('[\\\\(\\\\)]') %&gt;% \n      # hogehoge短大をhogehoge短期大学に変換\n      str_replace('短大', '短期大学') %&gt;% \n      # hogehoge大をhogehoge大学に変換\n      str_replace('大$', '大学') \n    ) %&gt;% \n  mutate(\n    ラベル =      \n      # 個別の大学の表記の統一\n      str_replace_all(ラベル, set_names(daigaku_regex$new, daigaku_regex$old))\n  ) %&gt;% \n  select(-変数) %&gt;% \n  # 年度・値・ラベルの対応表を出力\n  write_excel_csv('02_middle/年度別大学コード.csv')"
  },
  {
    "objectID": "05_教育学研究/本文.html#データの整理-1",
    "href": "05_教育学研究/本文.html#データの整理-1",
    "title": "再現コード",
    "section": "",
    "text": "04_script/データ前処理.qmd\n\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(kamaken)\n\n# データ読み込み -------------------------------------------------------------------------------------\n# 30年分のデータを読み込み（年度でネストしておく）\ndata_list &lt;- \n  tibble(\n    year = c(1993, 1991, 1992, 1994:2019),\n    path = list.files('01_rawdata/生協調査', full.names = T),\n    # 年によってデータの文字コードが違うので注意\n    enc = c(rep('cp932', 22), \n            'utf8', 'utf8', 'cp932', 'cp932', \n            'cp932', 'utf8', 'cp932'),\n    data = map2(path, enc, ~read_sav(.x, encoding = .y))\n  ) |&gt; \n  select(year, data)\n\n# 変数名の対応表を読み込み（年度でネストしておく）\nrename_list &lt;-\n  read_csv('01_input/rename_list.csv') |&gt; \n  pivot_longer(cols = -new, names_to = 'year', values_to = 'old', \n               names_transform = list(year = parse_integer)) |&gt; \n  drop_na() |&gt; \n  nest(namelist = c(-year))\n\n# 変数ラベル・値ラベル\nvarlab &lt;- read_csv('02_middle/varlab.csv')\nvallab &lt;- read_csv('02_middle/vallab.csv')\n\n\n# 前処理 -----------------------------------------------------------------------------------------\n# データセットと対応表をくっつける\ndata &lt;-\n  inner_join(\n    data_list,\n    rename_list,\n    by = 'year'\n  ) |&gt; \n  # 変数選択＆リネーム\n  mutate(data = map2(data, namelist, ~select(.x, set_names(.y$old, .y$new)))) |&gt; \n  # ラベルをはがす\n  mutate(data = map(data, zap_labels)) |&gt; \n  select(year, data) |&gt; \n  unnest(data) |&gt; \n  # idを振る\n  mutate(id = row_number()) |&gt; \n  relocate(year, id)\n\n\n# 大学コード ---------------------------------------------------------------------------------------\n# 大学コード読み込み\ndaigaku_code &lt;- read_csv('02_middle/年度別大学コード.csv')\n\n\ndf1 &lt;-\n  left_join(data, daigaku_code, by = c('year', '大学コード' = '値')) |&gt; \n  # 大学のラベルを大学名にリコード，位置調整\n  relocate(year, id, 大学名 = ラベル) |&gt; \n  # いらなくなった大学コードを削除\n  select(!大学コード)\n\n\n# 年収 ----------------------------------------------------------------------------------\n# 年によって年収のコーディングの仕方が異なる\n# 1991〜2002までは実数値，2003は500万〜1500万のカテゴリ，2004〜は0〜1500万のカテゴリ，ただし2008〜2015は値が21〜29という謎仕様になっているので注意\n\n# 2015年までは父母の職業と年収を聞いているが，2016年からは主な家計支持者は職業と年収およびその他家族の年収を聞くようになった\n# 父母のうち年収の高い方を主な家計支持者とみなし，2016年以降のフォーマットにそろえる\n\ndf2 &lt;-\n  df1 |&gt; \n  # select(year, id, matches('(_年収|_職業)$'),) |&gt; \n  pivot_longer(cols = matches('(_年収|_職業)$'), names_to = c('who', '.value'), names_sep = '_') |&gt; \n  # 年によって聞き方が異なる\n  # 無回答・わからないを0にコード，あとは2003年のカテゴリに合わせる\n  mutate(\n    年収 = \n      case_when(\n        year %in% 1991:2002 & (年収 == 9999 | is.na(年収)) ~ 0,\n        year %in% 1991:2002 & 年収 &lt; 500 ~ 1,\n        year %in% 1991:2002 & 年収 &gt;= 500 & 年収 &lt; 750 ~ 2,\n        year %in% 1991:2002 & 年収 &gt;= 750 & 年収 &lt; 1000 ~ 3,\n        year %in% 1991:2002 & 年収 &gt;= 1000 & 年収 &lt; 1500 ~ 4,\n        year %in% 1991:2002 & 年収 &gt;= 1500 ~ 5,\n        year == 2003 & (年収 == 6 | 年収 == 9 | is.na(年収)) ~ 0,\n        year == 2003 & 年収 == 1 ~ 1,\n        year == 2003 & 年収 == 2 ~ 2,\n        year == 2003 & 年収 == 3 ~ 3,\n        year == 2003 & 年収 == 4 ~ 4,\n        year == 2003 & 年収 == 5 ~ 5,\n        year %in% c(2004:2007, 2016:2020) & (年収 == 9 | 年収 == 99 | is.na(年収)) ~ 0,\n        year %in% c(2004:2007, 2016:2020) & 年収 %in% 1:4 ~ 1,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 5 ~ 2,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 6 ~ 3,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 7 ~ 4,\n        year %in% c(2004:2007, 2016:2020) & 年収 == 8 ~ 5,\n        year %in% 2008:2015 & (年収 == 29 | 年収 == 99 | is.na(年収)) ~ 0,\n        year %in% 2008:2015 & 年収  %in%  21:24 ~ 1,\n        year %in% 2008:2015 & 年収 == 25 ~ 2,\n        year %in% 2008:2015 & 年収 == 26 ~ 3,\n        year %in% 2008:2015 & 年収 == 27 ~ 4,\n        year %in% 2008:2015 & 年収 == 28 ~ 5,\n        TRUE ~ NA_real_),\n    職業 = \n      case_when(\n        year %in% 1991:2003 & 職業 == 1 ~ '公務員非管理職',\n        year %in% 1991:2003 & 職業 == 2 ~ '公務員管理職',\n        year %in% 1991:2003 & 職業 == 3 ~ '中小企業非管理職',\n        year %in% 1991:2003 & 職業 == 4 ~ '中小企業管理職',\n        year %in% 1991:2003 & 職業 == 5 ~ '大企業非管理職',\n        year %in% 1991:2003 & 職業 == 6 ~ '大企業管理職',\n        year %in% 1991:2003 & 職業 == 7 ~ '団体役員・職員・私立学校教職員',\n        year %in% 1991:2003 & 職業 == 8 ~ '中小企業経営者',\n        year %in% 1991:2003 & 職業 == 9 ~ '自営業',\n        year %in% 1991:2003 & 職業 == 10 ~ '農林水産業',\n        year %in% 1991:2003 & 職業 == 11 ~ '自由業',\n        year %in% 1991:2003 & 職業 == 12 ~ 'その他職業',\n        year %in% 1991:2003 & 職業 == 13 ~ '年金金利生活者',\n        year %in% 1991:2003 & 職業 == 14 ~ '無職',\n        year %in% 1991:2003 & 職業 == 15 ~ 'パート',\n        year %in% 1991:2003 & (職業 == 99 | is.na(職業)) ~ '無回答',\n        year %in% 2004:2020 & 職業 == 1 ~ '公務員非管理職',\n        year %in% 2004:2020 & 職業 == 2 ~ '公務員管理職',\n        year %in% 2004:2020 & 職業 == 3 ~ '中小企業非管理職',\n        year %in% 2004:2020 & 職業 == 4 ~ '中小企業管理職',\n        year %in% 2004:2020 & 職業 == 5 ~ '大企業非管理職',\n        year %in% 2004:2020 & 職業 == 6 ~ '大企業管理職',\n        year %in% 2004:2020 & 職業 == 7 ~ '団体役員・職員・私立学校教職員',\n        year %in% 2004:2020 & 職業 == 8 ~ '中小企業経営者',\n        year %in% 2004:2020 & 職業 == 9 ~ '自営業',\n        year %in% 2004:2020 & 職業 == 10 ~ '農林水産業',\n        year %in% 2004:2020 & 職業 == 11 ~ '自由業',\n        year %in% 2004:2020 & 職業 == 12 ~ 'その他職業',\n        year %in% 2004:2020 & 職業 == 13 ~ 'パート',\n        year %in% 2004:2020 & 職業 == 14 ~ '年金金利生活者',\n        year %in% 2004:2020 & 職業 == 15 ~ '無職',\n        year %in% 2004:2020 & (職業 == 99 | is.na(職業)) ~ '無回答',\n        TRUE ~ NA_character_\n      )) |&gt; \n  pivot_wider(names_from = who, names_glue = '{who}_{.value}', values_from = c(職業, 年収)) |&gt; \n  # 父と母で年収カテゴリの高い方を主な家計支持者とする\n  mutate(\n    家計支持者 = \n      case_when(\n        year %in% 1991:2015 & 父_年収 &gt;= 母_年収 ~ '父',\n        year %in% 1991:2015 & 母_年収 &gt; 父_年収 ~ '母',\n        TRUE ~ '主な家計支持者'),\n    親年収 = \n      case_when(\n        家計支持者 == '父' ~ 父_年収,\n        家計支持者 == '母' ~ 母_年収,\n        TRUE ~ 主な家計支持者_年収),\n    親職業 = \n      case_when(\n        家計支持者 == '父' ~ 父_職業,\n        家計支持者 == '母' ~ 母_職業,\n        TRUE ~ 主な家計支持者_職業),\n  ) |&gt; \n  # カテゴリ化\n  mutate(\n    親年収 = factor(\n      親年収, levels = 0:5, \n      labels = c('わからない・無回答', '500万未満', '500万-749万', '750万-999万', '1000万-1499万', '1500万以上')\n    ),\n    親職業 = factor(親職業) |&gt; fct_relevel('大企業管理職')\n  ) |&gt; \n  # いらない変数削除\n  select(!c(matches('^(父|母|主な家計支持者|その他家族)_(年収|職業)$'), 家計支持者))\n\n\n\n# そのほかの変数のリコード --------------------------------------------------------------------------------\n\n\ndf3 &lt;-\n  df2 |&gt; \n  # 変数のリコード\n  mutate(\n    学部 = \n      case_when(\n        学部 == 1 ~ '文科系',\n        学部 == 2 ~ '理科系',\n        学部 == 3 ~ '医歯薬系',\n        学部 == 4 ~ 'その他',\n        TRUE ~ NA_character_\n      ) |&gt; fct_infreq(),\n    入試形態 = \n      case_when(\n        入試形態 == 1 ~ '一般入試',\n        year %in% 1991:2002 & 入試形態 == 3 ~ '内部進学',\n        year == 2003 & 入試形態 == 7 ~ '内部進学',\n        year %in% 2004:2019 & 入試形態 == 4 ~ '内部進学',\n        year == 2020 & 入試形態 == 3 ~ '内部進学',\n        year %in% 1991:2002 & 入試形態 == 2 ~ '推薦入試',\n        year == 2003 & 入試形態 %in% c(2, 3, 5, 6) ~ '推薦入試',\n        year %in% 2004:2019 & 入試形態 %in% c(2, 3, 5, 6) ~ '推薦入試',\n        year == 2020 & 入試形態 %in% c(2, 4, 5, 6) ~ '推薦入試',\n        year %in% 1991:2002 & 入試形態 == 4 ~ 'その他',\n        year == 2003 & 入試形態 %in% c(4, 8, 9, 10, 11, 12) ~ 'その他',\n        year %in% 2004:2019 & 入試形態 %in% c(7, 8, 9, 10, 11) ~ 'その他',\n        year == 2020 & 入試形態 %in% c(7, 8, 9, 10, 11) ~ 'その他',\n        TRUE ~ NA_character_\n      ) |&gt; fct_infreq(),\n    学年 = \n      case_when(\n        year %in% 1991:2015 & 学年 == 1 ~ '1年',\n        year %in% 1991:2015 & 学年 == 2 ~ '2年',\n        year %in% 1991:2015 & 学年 == 3 ~ '3年',\n        year %in% 1991:2015 & 学年 == 4 ~ '4年以上',\n        year %in% 2016:2020 & 学年 == 1 ~ '1年',\n        year %in% 2016:2020 & 学年 == 2 ~ '2年',\n        year %in% 2016:2020 & 学年 == 3 ~ '3年',\n        year %in% 2016:2020 & 学年 %in% 4:6 ~ '4年以上',\n        TRUE ~ NA_character_\n      ) |&gt; factor(),\n    性別 = \n      case_when(\n        year %in% 1991:2017 & 性別 %in% 1:2 ~ '男性',\n        year %in% 1991:2017 & 性別 %in% 3:4 ~ '女性',\n        year %in% 2018:2020 & 性別 == 1 ~ '男性',\n        year %in% 2018:2020 & 性別 == 2 ~ '女性',\n        TRUE ~ NA_character_\n      ) |&gt; fct_relevel('男性'),\n    大学生活重点 = \n      case_when(\n        大学生活重点 == 1 ~ '勉強や研究',\n        大学生活重点 == 2 ~ 'サークル',\n        大学生活重点 == 3 ~ '趣味',\n        大学生活重点 == 4 ~ '人間関係',\n        大学生活重点 == 5 ~ '資格取得',\n        大学生活重点 == 6 ~ 'アルバイト',\n        大学生活重点 == 7 ~ '重点なくほどほど',\n        大学生活重点 == 8 ~ 'なんとなくすぎる生活',\n        year != 2020 & 大学生活重点 == 9 ~ 'その他',\n        year == 2020 & 大学生活重点 == 9 ~ NA_character_,\n        大学生活重点 == 10 ~ 'その他',\n        TRUE ~ NA_character_) |&gt; \n      fct_infreq(),\n    across(\n      c(大学選択理由_1, 大学選択理由_2),\n      ~{case_when(\n        . == 1 ~ '学びたい専門がある',\n        . == 2 ~ '学力にあっている',\n        . == 3 ~ '雰囲気が合っていそう',\n        . == 4 ~ '通学に便利',\n        . == 5 ~ '有名',\n        . == 6 ~ '就職に有利',\n        . == 7 ~ '学費が安い',\n        . == 8 ~ 'ここしか受からなかった',\n        between(year, 2004, 2006) & . == 9 ~ 'その他',\n        between(year, 2007, 2020) & . == 9 ~ '附属高校に通っていた',\n        between(year, 2004, 2006) & . == 10 ~ NA_character_,\n        between(year, 2007, 2020) & . == 10 ~ '家族などのすすめ',\n        between(year, 2007, 2019) & . == 11 ~ 'その他',\n        year == 2020 & . == 11 ~ 'スポーツができる',\n        year == 2020 & . == 12 ~ 'その他',\n        TRUE ~ NA_character_\n      )}\n    ),\n    アルバイト経験 = case_when(\n      year %in% 2005:2020 & アルバイト経験 == 2 ~ 'なし',\n      year %in% 1991:2004 & アルバイト経験 == 0 ~ 'なし',\n      アルバイト経験 == 1 ~ 'あり',\n      .default = NA\n    ),\n    奨学金収入 = case_when(\n      year %in% 1991:2017 ~ 奨学金収入 / 100,\n      year %in% 2018:2020 ~ 奨学金収入 / 10000,\n      .default = NA\n    ),\n    奨学金有無 = case_when(\n      奨学金収入 == 0 ~ '受給なし',\n      is.na(奨学金収入) ~ NA,\n      .default = '受給あり'\n    ) |&gt; fct_relevel('受給なし', '受給あり'),\n    across(\n      c(自習時間_大学_分, 自習時間_大学以外_分),\n      ~{case_when(\n        year %in% 2014:2020 & between(., 0, 59) ~ .,\n        year %in% 2012:2013 ~ .,\n        TRUE ~ NA_real_)}\n    ),\n    across(\n      c(自習時間_大学_時, 自習時間_大学以外_時),\n      ~{case_when(\n        year %in% 2014:2020 & . != 999 ~ .,\n        year %in% 2012:2013 ~ .,\n        TRUE ~ NA_real_)}\n    ),\n    自習時間_大学 = \n      case_when(\n        year %in% 2012:2013 ~ 自習時間_大学_分,\n        year %in% 2014:2020 ~ 自習時間_大学_時*60 + 自習時間_大学_分,\n        TRUE ~ NA_real_\n      ),\n    自習時間_大学以外 = \n      case_when(\n        year %in% 2012:2013 ~ 自習時間_大学以外_分,\n        year %in% 2014:2020 ~ 自習時間_大学以外_時*60 + 自習時間_大学以外_分,\n        TRUE ~ NA_real_\n      )\n  ) |&gt; \n  select(!c(自習時間_大学_分:自習時間_大学以外_時))\n\n# 保存\nwrite_rds(df3, '02_middle/corp.rds')"
  },
  {
    "objectID": "05_教育学研究/本文.html#パッケージ読み込み関数定義",
    "href": "05_教育学研究/本文.html#パッケージ読み込み関数定義",
    "title": "再現コード",
    "section": "パッケージ読み込み・関数定義",
    "text": "パッケージ読み込み・関数定義\n\n\nCode\nlibrary(knitr)\nlibrary(estatapi)\nlibrary(fixest)\nlibrary(mice)\nlibrary(didimputation)\nlibrary(modelsummary)\nlibrary(tidyverse)\nlibrary(kamaken)\n\n# Rubinの公式で多重代入の結果を統合\npool_rubin &lt;- function(.tibble) {\n  .tibble |&gt; \n    mutate(variance = std.error^2) |&gt;\n    summarise(\n      M = n(),\n      estimate.combined = mean(estimate),\n      Vw = sum(variance) / M,\n      Vb = sum((estimate - mean(estimate)) ^ 2) / (M - 1),\n      Vt = Vw + (1 + 1 / M) * Vb,\n      SE.combined = sqrt(Vt),\n      .by = term\n    ) |&gt; \n    # 信頼区間計算\n    mutate(\n      conf.low = estimate.combined - qnorm(1 - .025)*SE.combined,\n      conf.high = estimate.combined + qnorm(1 - .025)*SE.combined\n    ) |&gt; \n    select(term, M, estimate = estimate.combined, std.error = SE.combined, conf.low, conf.high)\n} \n\n\n# 並列化設定\noptions(mc.cores = 8)\n\ntheme_set(\n  theme_bw(base_family = 'Hiragino Sans', base_size = 8)+\n    theme(\n      # キャプションを左寄せ（デフォルトは右）\n      plot.caption = element_text(hjust = 0),\n    )\n)\n\n\nappid &lt;- Sys.getenv('ESTAT_APPID')"
  },
  {
    "objectID": "05_教育学研究/本文.html#大学生の生活時間データの取得",
    "href": "05_教育学研究/本文.html#大学生の生活時間データの取得",
    "title": "再現コード",
    "section": "大学生の生活時間データの取得",
    "text": "大学生の生活時間データの取得\n\nESTATより社会生活基本調査のデータを取得\n\n\nCode\n# データ取得\nstudy_time_result &lt;- \n  bind_rows(\n    estat_getStatsData(appid, '0000090009', \n                       cdCat03 = '023', cdCat04 = '002,006,007,012,013,014,015,018,020'),\n    estat_getStatsData(appid, '0000090247',\n                       cdCat03 = '023', cdCat04 = '002,006,007,013,014,015,016,019,021'),\n    estat_getStatsData(appid, '0000090722',\n                       cdCat03 = '017', cdCat04 = '002,006,007,013,014,015,016,019,021'),\n    estat_getStatsData(appid, '0000091391',\n                       cdCat03 = '017', cdCat04 = '002,006,007,013,014,015,016,019,021'),\n    estat_getStatsData(appid, '0003002460', cdTab = '006',\n                       cdCat02 = '002,006,007,013,014,015,016,019,021', cdCat04 = '018'),\n    estat_getStatsData(appid, '0003066956',\n                       cdCat02 = '007,011,012,018,019,020,021,024,026', cdCat04 = '021'),\n    estat_getStatsData(appid, '0003199845',\n                       cdCat03 = '5', cdCat04 = '0', \n                       cdCat05 = '0', cdCat06 = 'H0702,H0706,H0707,H0713,H0714,H0715,H0716,H0719,H0721'),\n    estat_getStatsData(appid, '0003456749',\n                       cdCat03 = '5', cdCat04 = '0', \n                       cdCat05 = '0', cdCat06 = '02,06,07,13,14,15,16,19,21')\n  )\n\n\n\n\n取得したデータの整形\n\n\nCode\n# 前処理\nstudy_time_data &lt;-\n  study_time_result |&gt; \n  # 列名を統一\n  mutate(\n    曜日 = coalesce(\n      `曜日（４）090001`, `曜日５Ａ090304`, `曜日（５A）090661`, 曜日, `曜日-2011`, `曜日6A_071_2016A`\n    ),\n    男女 = coalesce(\n      `男女３090002`, `男女３090630`, 男女, `性別-2011`, `男女3_001_2016A`\n    ),\n    学校段階 = coalesce(\n      `教育Ａ090014`, `教育（２９）090112`, `教育就業２０090305`, `教育就業２０090662`, `教育，ふだんの就業状態`, `教育，ふだんの就業状態-2011`, `教育16_004_2016A`, 教育\n    ),\n    行動 = coalesce(\n      `行動２２時090005`, `総平均090103`, `１０上行総時在090306`, `行動の種類２３090634`, 行動の種類, `行動の種類別総平均時間等_2011`, `行動の種類26_074_2016A`\n    )\n  ) |&gt; \n  select(年次 = time_code, 曜日, 男女, 学校段階, 行動, 時間 = value) |&gt; \n  # フォーマットの統一\n  mutate(\n    年次 = parse_number(年次) / 1000000,\n    曜日 = str_remove(曜日, '\\\\d{1,2}_'),\n    男女 = str_remove(男女, '\\\\d{1,2}_') |&gt; \n      str_replace('男女計', '総数'),\n    学校段階 = str_trim(学校段階, 'both') |&gt;\n      str_remove_all('(\\\\d_|在学者|・専門学校|中学・|中学，)'),\n    行動 = case_when(\n      str_detect(行動, '睡眠') ~ '睡眠',\n      str_detect(行動, '学業(?!以外)') ~ '学業',\n      # 2006年までは「学習・研究」2011年以降は「学習・自己啓発・訓練」\n      str_detect(行動, '学習') ~ '学習（学業以外）',\n      str_detect(行動, '趣味・娯楽') ~ '趣味・娯楽',\n      str_detect(行動, '休養・くつろぎ') ~ '休養・くつろぎ',\n      str_detect(行動, '仕事') ~ '仕事',\n      str_detect(行動, '交際・付き合い') ~ '交際・付き合い',\n      str_detect(行動, 'テレビ・ラジオ　?・新聞・雑誌') ~ 'テレビ・ラジオ・新聞・雑誌',\n      str_detect(行動, 'その他') ~ 'その他',\n      TRUE ~ 行動\n    ),\n    # 「時.分」を「分」になおす（「3.4」は「3時間40分」なので注意！！）\n    時間_時 = case_when(\n      年次 %in% c(1986, 1991, 1996, 2001) ~ \n        str_extract(時間, '^.') |&gt; \n        parse_double(),\n      TRUE ~ 0\n    ),\n    時間_分 = case_when(\n      年次 %in% c(1986, 1991, 1996, 2001) ~ \n        str_extract(時間, '(?&lt;=\\\\.).+$') |&gt; \n        str_pad(width = 2, side = 'right', pad = '0') |&gt; \n        parse_double() |&gt; \n        coalesce(0),\n      TRUE ~ 時間\n    )\n  ) |&gt; \n  # 統合\n  mutate(時間 = 時間_時*60 + 時間_分) |&gt; \n  drop_na()"
  },
  {
    "objectID": "05_教育学研究/本文.html#大学生協調査データの読み込み",
    "href": "05_教育学研究/本文.html#大学生協調査データの読み込み",
    "title": "再現コード",
    "section": "大学生協調査データの読み込み",
    "text": "大学生協調査データの読み込み\n\n\nCode\ncorp_data &lt;- read_rds('02_middle/corp.rds')\n\ndf &lt;-\n  corp_data |&gt; \n  mutate(\n    入学年 = year - as.numeric(学年) + 1,\n    勉強ダミー = case_when(\n      大学生活重点 == '勉強や研究' ~ 1,\n      is.na(大学生活重点) ~ NA,\n      .default = 0\n    ) |&gt; factor(),\n    入試形態 = fct_collapse(入試形態, その他 = c('内部進学', 'その他')),\n    親職業 = fct_infreq(親職業),\n    出身階層 = case_match(\n      親職業,\n      '農林水産業' ~ '農林水産業',\n      c('自営業', '自由業') ~ '自営業・自由業',\n      c('中小企業管理職', '中小企業経営者', '大企業管理職', '公務員管理職', '団体役員・職員・私立学校教職員') ~ '上層ノンマニュアル',\n      c('中小企業非管理職', '大企業非管理職', '公務員非管理職', 'その他職業', 'パート') ~ '被雇用者',\n      # c('大企業非管理職', '公務員非管理職') ~ '大企業・公務員被雇用者',\n      # c('中小企業非管理職', 'パート') ~ '中小企業被雇用者・パート',\n      '無回答' ~ '無回答',\n      c('無職', '年金金利生活者') ~ '無職・年金金利生活者',\n      .default = NA\n    ) |&gt; fct_relevel('上層ノンマニュアル', '被雇用者', '自営業・自由業', '農林水産業', '無職・年金金利生活者', '無回答'),\n  ) |&gt; \n  mutate(大学名 = as_factor(大学名)) |&gt; \n  # 大学以外（専門学校・短期大学・大学院・夜間学部・大学校）を除く\n  filter(!str_detect(大学名, '(短期大学|_大学院|_夜間|大学校|専門学校)$')) \n\n\n\nカリキュラム改革についての変数の作成\n\n\nCode\n# カリキュラム改革の年度\ndaigaku_kaikaku &lt;- read_csv('01_input/改革年変数.csv')\n\ndf_seminar_大綱化 &lt;-\n  df |&gt; \n  select(\n    year, 入学年, id, 大学名, 学部, 入試形態, 学年, 性別, 勉強ダミー, \n    # アルバイト経験, \n    奨学金有無, 親年収, 出身階層\n  ) |&gt; \n  # 改革年をくっつける\n  left_join(\n    daigaku_kaikaku |&gt; select(大学名, 改革年 = 改革年_大綱化), \n    by = '大学名'\n  ) |&gt; \n  # 入学年が改革年より前のケースは0、入学年が改革年以降のケースは1（改革年が0は改革がなかった大学）\n  mutate(\n    改革ダミー = case_when(\n      改革年 == 0 ~ 0,\n      入学年 &lt; 改革年 ~ 0,\n      入学年 &gt;= 改革年 ~ 1,\n      TRUE ~ NA_real_\n    ) |&gt; factor(),\n  ) |&gt; \n  # 1年に絞る\n  filter(学年 %in% c('1年')) |&gt; \n  # 2004年以前のデータに絞る\n  filter(year &lt; 2004) |&gt; \n  # 改革年がNAのものは対象大学でないので削除\n  filter(!is.na(改革年)) |&gt; \n  mutate(\n    親年収 = fct_na_level_to_value(親年収, 'わからない・無回答') |&gt; as.ordered(),\n    出身階層 = fct_na_level_to_value(出身階層, '無回答'),\n  ) |&gt; \n  select(year, 大学名, 学部, 入試形態, 性別, 勉強ダミー, 奨学金有無, 親年収, 出身階層, 改革年, 改革ダミー)\n\n\ndf_seminar_AL &lt;-\n  df |&gt; \n  select(\n    year, 入学年, id, 大学名, 学部, 入試形態, 学年, 性別, 勉強ダミー, \n    # アルバイト経験,\n    奨学金有無, 親年収, 出身階層, 自習時間_大学\n  ) |&gt; \n  # 改革年をくっつける\n  left_join(\n    daigaku_kaikaku |&gt; select(大学名, 改革年 = 改革年_AL), \n    by = '大学名'\n  ) |&gt; \n  # 入学年が改革年より前のケースは0、入学年が改革年以降のケースは1（改革年が0は改革がなかった大学）\n  mutate(\n    改革ダミー = case_when(\n      改革年 == 0 ~ 0,\n      入学年 &lt; 改革年 ~ 0,\n      入学年 &gt;= 改革年 ~ 1,\n      TRUE ~ NA_real_\n    ) |&gt; factor(),\n  ) |&gt; \n  # 1年に絞る\n  filter(学年 %in% c('1年')) |&gt; \n  # 2012〜2019に期間を絞る\n  filter(between(year, 2012, 2019)) |&gt; \n  # 改革年がNAのものは対象大学でないので削除\n  filter(!is.na(改革年)) |&gt; \n  mutate(\n    親年収 = fct_na_level_to_value(親年収, 'わからない・無回答') |&gt; as.ordered(),\n    出身階層 = fct_na_level_to_value(出身階層, '無回答'),\n  ) |&gt; \n  select(year, 大学名, 学部, 入試形態, 性別, 勉強ダミー, 奨学金有無, 親年収, 出身階層, 自習時間_大学, 改革年, 改革ダミー)"
  },
  {
    "objectID": "05_教育学研究/本文.html#多重代入データの作成",
    "href": "05_教育学研究/本文.html#多重代入データの作成",
    "title": "再現コード",
    "section": "多重代入データの作成",
    "text": "多重代入データの作成\n\n\nCode\n# 多重代入データの作成\nM &lt;- 80\nimp_大綱化 &lt;- \n  mice::futuremice(\n    df_seminar_大綱化, \n    m = M, \n    parallelseed = 364781, \n    n.core = 8,\n    defaultMethod = c(\"lasso.norm\", \"lasso.logreg\", \"polyreg\", \"polr\")\n  )\n\nimp_AL &lt;-\n  mice::futuremice(\n    df_seminar_AL, \n    m = M, \n    parallelseed = 741987, \n    n.core = 8,\n    defaultMethod = c(\"lasso.norm\", \"lasso.logreg\", \"polyreg\", \"polr\")\n  )"
  },
  {
    "objectID": "05_教育学研究/本文.html#初年次教育の効果をdidで推定",
    "href": "05_教育学研究/本文.html#初年次教育の効果をdidで推定",
    "title": "再現コード",
    "section": "初年次教育の効果をDiDで推定",
    "text": "初年次教育の効果をDiDで推定\n\n\nCode\n# 多重代入データに対して分析を実行\nres_imp_大綱化 &lt;-\n  imp_大綱化 |&gt; \n  complete('long') |&gt; \n  mutate(across(c(勉強ダミー, 改革ダミー), \\(x) as.character(x) |&gt; parse_double())) |&gt; \n  group_nest(.imp) |&gt; \n  mutate(\n    model1 = map(\n      data, \\(data)\n      feols(勉強ダミー ~ 改革ダミー, data = data, cluster = '大学名') |&gt; \n        broom::tidy(conf.int = T) |&gt; \n        filter(term == '改革ダミー')\n    ),\n    model2 = map(\n      data, \\(data) \n      did_imputation(\n        data = data,\n        yname = '勉強ダミー', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名,\n        cluster_var = '大学名', \n        horizon = NULL, pretrends = NULL\n      )\n    ),\n    model3 = map(\n      data, \\(data) \n      did_imputation(\n        data = data,\n        yname = '勉強ダミー', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名 + 性別 + 親年収 + 出身階層 + 学部 + 入試形態 + 奨学金有無,\n        cluster_var = '大学名', \n        horizon = NULL, pretrends = NULL\n      )\n    ),\n  ) |&gt; \n  select(.imp, model1, model2, model3)\n\n\n\nres_imp_AL1 &lt;-\n  imp_AL |&gt;\n  complete('long') |&gt;\n  mutate(across(c(勉強ダミー, 改革ダミー), \\(x) as.character(x) |&gt; parse_double())) |&gt; \n  group_nest(.imp) |&gt;\n  mutate(\n    model1 = map(\n      data, \\(data)\n      feols(勉強ダミー ~ 改革ダミー, data = data, cluster = '大学名') |&gt; \n        broom::tidy(conf.int = T) |&gt; \n        filter(term == '改革ダミー')\n    ),\n    model2 = map(\n      data, \\(data) \n      did_imputation(\n        data = data,\n        yname = '勉強ダミー', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名,\n        cluster_var = '大学名', \n        horizon = NULL, pretrends = NULL\n      )\n    ),\n    model3 = map(\n      data, \\(data) \n      did_imputation(\n        data = data,\n        yname = '勉強ダミー', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名 + 性別 + 親年収 + 出身階層 + 学部 + 入試形態 + 奨学金有無,\n        cluster_var = '大学名', \n        horizon = NULL, pretrends = NULL\n      )\n    ),\n  ) |&gt; \n  select(.imp, model1, model2, model3)\n\n\n\nres_imp_AL2 &lt;-\n  imp_AL |&gt;\n  complete('long') |&gt;\n  mutate(across(c(勉強ダミー, 改革ダミー), \\(x) as.character(x) |&gt; parse_double())) |&gt; \n  group_nest(.imp) |&gt;\n  mutate(\n      model1 = map(\n      data, \\(data)\n      feols(自習時間_大学 ~ 改革ダミー, data = data, cluster = '大学名') |&gt; \n        broom::tidy(conf.int = T) |&gt; \n        filter(term == '改革ダミー')\n    ),\n    model2 = map(\n      data, \\(data) \n      did_imputation(\n        data = data,\n        yname = '自習時間_大学', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名,\n        cluster_var = '大学名', \n        horizon = NULL, pretrends = NULL\n      )\n    ),\n    model3 = map(\n      data, \\(data) \n      did_imputation(\n        data = data,\n        yname = '自習時間_大学', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名 + 性別 + 親年収 + 出身階層 + 学部 + 入試形態 + 奨学金有無,\n        cluster_var = '大学名', \n        horizon = NULL, pretrends = NULL\n      )\n    ),\n  ) |&gt; \n  select(.imp, model1, model2, model3)"
  },
  {
    "objectID": "05_教育学研究/本文.html#出身階層による効果の異質性",
    "href": "05_教育学研究/本文.html#出身階層による効果の異質性",
    "title": "再現コード",
    "section": "出身階層による効果の異質性",
    "text": "出身階層による効果の異質性\n\n\nCode\n# heterogeneous ATTの推定\n\nresult_hetero_大綱化 &lt;-\n  imp_大綱化 |&gt;\n  complete('long') |&gt;\n  mutate(across(c(勉強ダミー, 改革ダミー), \\(x) as.character(x) |&gt; parse_double())) |&gt; \n  group_nest(.imp) |&gt; \n  mutate(\n    data = map(\n      data, \\(data)\n      data |&gt; \n        # ウェイト作成\n        mutate(id = row_number(), value = 1, 出身階層_copy = 出身階層) |&gt; \n        pivot_wider(names_from = 出身階層_copy, values_from = value, values_fill = 0) |&gt; \n        # 改革実施後（改革ダミー=1）かつ、当該の出身階層の人のみを1に\n        mutate(across(levels(df_seminar_大綱化$出身階層), \\(x) case_when(x == 1 & 改革ダミー == 1 ~ 1, .default = 0))) |&gt; \n        # ウェイト基準化\n        mutate(across(levels(df_seminar_大綱化$出身階層), \\(x) x / sum(x)))\n    ),\n    result1 = map(\n      data, \\(data)\n      did_imputation(\n        data = data, \n        yname = '勉強ダミー', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名 + 性別 + 親年収 + 出身階層 + 学部 + 入試形態 + 奨学金有無,\n        cluster_var = '大学名', \n        wtr = levels(df_seminar_AL$出身階層)\n      )\n    )\n  ) |&gt; \n  select(.imp, result1)\n\n\n\nresult_hetero_AL &lt;- \n  imp_AL |&gt;\n  complete('long') |&gt;\n  mutate(across(c(勉強ダミー, 改革ダミー), \\(x) as.character(x) |&gt; parse_double())) |&gt; \n  group_nest(.imp) |&gt; \n  mutate(\n    data = map(\n      data, \\(data)\n      data |&gt; \n        # ウェイト作成\n        mutate(id = row_number(), value = 1, 出身階層_copy = 出身階層) |&gt; \n        pivot_wider(names_from = 出身階層_copy, values_from = value, values_fill = 0) |&gt; \n        # 改革実施後（改革ダミー=1）かつ、当該の出身階層の人のみを1に\n        mutate(across(levels(df_seminar_AL$出身階層), \\(x) case_when(x == 1 & 改革ダミー == 1 ~ 1, .default = 0))) |&gt; \n        # ウェイト基準化\n        mutate(across(levels(df_seminar_AL$出身階層), \\(x) x / sum(x)))\n    ),\n    result1 = map(\n      data, \\(data)\n      did_imputation(\n        data = data, \n        yname = '勉強ダミー', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名 + 性別 + 親年収 + 出身階層 + 学部 + 入試形態 + 奨学金有無,\n        cluster_var = '大学名', \n        wtr = levels(df_seminar_AL$出身階層)\n      )\n    ),\n    result2 = map(\n      data, \\(data)\n      did_imputation(\n        data = data, \n        yname = '自習時間_大学', gname = '改革年', tname = 'year', idname = '大学名', \n        first_stage = ~ 0 | year + 大学名 + 性別 + 親年収 + 出身階層 + 学部 + 入試形態 + 奨学金有無,\n        cluster_var = '大学名', \n        wtr = levels(df_seminar_AL$出身階層)\n      )\n    )\n  ) |&gt; \n  select(.imp, result1, result2)"
  },
  {
    "objectID": "05_教育学研究/本文.html#表1",
    "href": "05_教育学研究/本文.html#表1",
    "title": "再現コード",
    "section": "表1",
    "text": "表1\n\n\nCode\nread_csv('01_input/改革年変数.csv') |&gt; \n  select(大学名, 改革年_大綱化) |&gt; \n  mutate(大学名 = str_remove(大学名, '大学')) |&gt; \n  group_by(改革年_大綱化) |&gt; \n  summarise(改革を実施した大学 = str_c(大学名, collapse = '、')) |&gt; \n  filter(改革年_大綱化 != 0) |&gt; \n  rename(year = 改革年_大綱化, 初年次教育を導入した大学 = 改革を実施した大学) |&gt; \n  datasummary_df(output = 'html', fmt = 0) \n\n\n\n\n表 1: 大綱化後の初年次教育導入時期\n\n\nyear\n初年次教育を導入した大学\n\n\n\n\n1992\nお茶の水女子\n\n\n1993\n東京、山形、宇都宮、群馬、埼玉、富山、静岡、神戸\n\n\n1994\n名古屋、大阪、九州、信州、長崎、佐賀、熊本、琉球\n\n\n1995\n北海道、福島、三重、山口、香川\n\n\n1996\n茨城、愛媛\n\n\n1997\n横浜国立、岐阜、広島、鹿児島\n\n\n1998\n京都、秋田、山梨、高知\n\n\n1999\n千葉、福井、岡山、宮崎\n\n\n2000\n岩手、新潟、島根\n\n\n2001\n鳥取\n\n\n2002\n東北、弘前"
  },
  {
    "objectID": "05_教育学研究/本文.html#表2",
    "href": "05_教育学研究/本文.html#表2",
    "title": "再現コード",
    "section": "表2",
    "text": "表2\n\n\nCode\nread_csv('01_input/改革年変数.csv') |&gt; \n  select(大学名, 改革年_AL) |&gt; \n  mutate(大学名 = str_remove(大学名, '大学')) |&gt; \n  group_by(改革年_AL) |&gt; \n  summarise(改革を実施した大学 = str_c(大学名, collapse = '、')) |&gt; \n  filter(改革年_AL != 0) |&gt; \n  rename(year = 改革年_AL) |&gt; \n  datasummary_df(output = 'html', fmt = 0) \n\n\n\n\n表 2: 「質的転換答申」以降の初年次教育改革の実施時期\n\n\nyear\n改革を実施した大学\n\n\n\n\n2012\n信州、岐阜、香川\n\n\n2013\n東北、群馬、静岡、愛媛、佐賀\n\n\n2014\n九州、山梨、宮崎\n\n\n2015\n東京、三重、奈良女子、徳島\n\n\n2016\n京都、弘前、神戸、岡山、大分、鹿児島\n\n\n2017\n山形、茨城\n\n\n2018\n広島\n\n\n2019\n大阪、福島"
  },
  {
    "objectID": "05_教育学研究/本文.html#図1",
    "href": "05_教育学研究/本文.html#図1",
    "title": "再現コード",
    "section": "図1",
    "text": "図1\n\n\nCode\nstudy_time_data |&gt; \n  filter(男女 == '総数' & 学校段階 %in% c('大学・大学院', '大学') & 行動 == '学業' & 曜日 == '週全体') |&gt; \n  mutate(時間 = 時間*7/60) |&gt; \n  ggplot(aes(factor(年次), 時間, group = 1))+\n  geom_line()+\n  labs(\n    x = '調査年',\n    y = '学業時間（週あたり・時間）',\n    caption = '・出典：総務省「社会生活基本調査」生活時間に関する結果\\n・2006年調査までは「大学・大学院」、2011年調査以降は「大学」の学業時間'\n  )\n\n\n\n\n\n図 1: 週あたり学業時間の推移"
  },
  {
    "objectID": "05_教育学研究/本文.html#図2",
    "href": "05_教育学研究/本文.html#図2",
    "title": "再現コード",
    "section": "図2",
    "text": "図2\n\n\nCode\nbind_rows(\n  `1` = res_imp_大綱化 |&gt; unnest(model1) |&gt; pool_rubin(),\n  `2` = res_imp_大綱化 |&gt; unnest(model2) |&gt; pool_rubin(),\n  `3` = res_imp_大綱化 |&gt; unnest(model3) |&gt; pool_rubin(),\n  .id = 'model'\n) |&gt; \n  select(model, estimate, conf.low, conf.high) |&gt; \n  \n  ggplot(aes(model, estimate, ymin = conf.low, ymax = conf.high))+\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'grey')+\n  geom_pointrange()+\n  geom_text(aes(label = round(estimate, 3)), nudge_x = 0.2)+\n  labs(\n    y = '「勉強・研究」選択確率の差分',\n    caption = 'model1：単回帰分析による関連\\nmodel2：大学固定効果と調査年固定効果を投入\\nmodel3：model2 + 共変量として性別、出身階層、親年収、学部、入試形態、奨学金有無を追加')\n\n\n\n\n\n図 2: 大綱化後の改革の「勉強・研究が重点」に対する効果"
  },
  {
    "objectID": "05_教育学研究/本文.html#図3",
    "href": "05_教育学研究/本文.html#図3",
    "title": "再現コード",
    "section": "図3",
    "text": "図3\n\n\nCode\nbind_rows(\n  `1` = res_imp_AL1 |&gt; unnest(model1) |&gt; pool_rubin(),\n  `2` = res_imp_AL1 |&gt; unnest(model2) |&gt; pool_rubin(),\n  `3` = res_imp_AL1 |&gt; unnest(model3) |&gt; pool_rubin(),\n  .id = 'model'\n) |&gt; \n  select(model, estimate, conf.low, conf.high) |&gt; \n  \n  ggplot(aes(model, estimate, ymin = conf.low, ymax = conf.high))+\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'grey')+\n  geom_pointrange()+\n  geom_text(aes(label = round(estimate, 3)), nudge_x = 0.2)+\n  scale_y_continuous(breaks = seq(-0.04, 0.08, 0.02))+\n  labs(\n    y = '「勉強・研究」選択確率の差分',\n    caption = 'model1：単回帰分析による関連\\nmodel2：大学固定効果と調査年固定効果を投入\\nmodel3：model2 + 共変量として性別、出身階層、親年収、学部、入試形態、奨学金有無を追加')\n\n\n\n\n\n図 3: 「質的転換答申」後の改革の「勉強・研究が重点」に対する効果"
  },
  {
    "objectID": "05_教育学研究/本文.html#図4",
    "href": "05_教育学研究/本文.html#図4",
    "title": "再現コード",
    "section": "図4",
    "text": "図4\n\n\nCode\nbind_rows(\n  `1` = res_imp_AL2 |&gt; unnest(model1) |&gt; pool_rubin(),\n  `2` = res_imp_AL2 |&gt; unnest(model2) |&gt; pool_rubin(),\n  `3` = res_imp_AL2 |&gt; unnest(model3) |&gt; pool_rubin(),\n  .id = 'model'\n) |&gt; \n  select(model, estimate, conf.low, conf.high) |&gt;\n\n  ggplot(aes(model, estimate, ymin = conf.low, ymax = conf.high))+\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'grey')+\n  geom_pointrange()+\n  geom_text(aes(label = round(estimate, 3)), nudge_x = 0.2)+\n  labs(\n    y = '大学と関係する自習時間の差分（週あたり・分）',\n    caption = 'model1：単回帰分析による関連\\nmodel2：大学固定効果と調査年固定効果を投入\\nmodel3：model2 + 共変量として性別、出身階層、親年収、学部、入試形態、奨学金有無を追加')\n\n\n\n\n\n図 4: 「質的転換答申」後の改革の「大学と関係する自習時間」に対する効果"
  },
  {
    "objectID": "05_教育学研究/本文.html#図5",
    "href": "05_教育学研究/本文.html#図5",
    "title": "再現コード",
    "section": "図5",
    "text": "図5\n\n\nCode\n# 信頼区間\nlist(\n  `（A）「大綱化」・「勉強・研究が重点」` = result_hetero_大綱化 |&gt; unnest(result1) |&gt; pool_rubin(),\n  `（B）「質的転換答申」・「勉強・研究が重点」` = result_hetero_AL |&gt; unnest(result1) |&gt; pool_rubin(),\n  `（C）「質的転換答申」・「大学と関係する自習時間」` = result_hetero_AL |&gt; unnest(result2) |&gt; pool_rubin()\n) |&gt; \n  list_rbind(names_to = 'model') |&gt; \n  # 出身階層並べ替え\n  mutate(term = fct_relevel(term, levels(df_seminar_大綱化$出身階層))) |&gt; \n  # 出身階層ごとにプロット\n  ggplot(aes(term, estimate, ymin = conf.low, ymax = conf.high))+\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'grey')+\n  geom_pointrange(size = 0.1)+\n  geom_text(aes(label = round(estimate, digits = 3)), nudge_x = 0.3, size = 3)+\n  facet_wrap(vars(model), scales = 'free_y', nrow = 4)+\n  labs(x = '出身階層', y = 'ATT')\n\n\n\n\n\n図 5: 出身階層による効果の異質性"
  },
  {
    "objectID": "05_教育学研究/本文.html#付表1",
    "href": "05_教育学研究/本文.html#付表1",
    "title": "再現コード",
    "section": "付表1",
    "text": "付表1\n\n\nCode\ndf_seminar_大綱化 |&gt; \n  select(勉強ダミー, 学部, 入試形態, 性別, 奨学金有無, 親年収, 出身階層, 改革ダミー) |&gt; \n  mutate(\n    勉強ダミー = factor(勉強ダミー),\n    改革ダミー = case_when(\n      改革ダミー == 0 ~ '改革前',\n      改革ダミー == 1 ~ '改革後'\n    )\n  ) |&gt; \n  mutate(across(where(is.factor), \\(x) fct_na_value_to_level(x, level = '無回答') |&gt; fct_drop())) |&gt; \n  mutate(親年収 = fct_collapse(親年収, `わからない・無回答` = '無回答')) |&gt; \n  rename(`勉強・研究重点`= 勉強ダミー) |&gt; \n  datasummary_balance(~改革ダミー, data = _, output = 'html')\n\n\n\n\n表 3: 改革前と改革後の記述統計（大綱化後）\n\n\n\n\n\n\n\n\n\n\n\n\n改革前 (N=13694)\n\n\n改革後 (N=12167)\n\n\n\n\n\nN\nPct.\nN\nPct.\n\n\n\n\n勉強・研究重点\n0\n11575\n84.5\n9898\n81.4\n\n\n\n1\n1986\n14.5\n2023\n16.6\n\n\n\n無回答\n133\n1.0\n246\n2.0\n\n\n学部\n文科系\n5227\n38.2\n4822\n39.6\n\n\n\n理科系\n7450\n54.4\n6566\n54.0\n\n\n\n医歯薬系\n1017\n7.4\n779\n6.4\n\n\n入試形態\n一般入試\n12539\n91.6\n10633\n87.4\n\n\n\n推薦入試\n1067\n7.8\n1188\n9.8\n\n\n\nその他\n69\n0.5\n81\n0.7\n\n\n\n無回答\n19\n0.1\n265\n2.2\n\n\n性別\n男性\n8023\n58.6\n6776\n55.7\n\n\n\n女性\n5671\n41.4\n5391\n44.3\n\n\n奨学金有無\n受給なし\n10740\n78.4\n9050\n74.4\n\n\n\n受給あり\n2869\n21.0\n2741\n22.5\n\n\n\n無回答\n85\n0.6\n376\n3.1\n\n\n親年収\n500万未満\n2385\n17.4\n1533\n12.6\n\n\n\n500万-749万\n2959\n21.6\n1569\n12.9\n\n\n\n750万-999万\n1596\n11.7\n1165\n9.6\n\n\n\n1000万-1499万\n1537\n11.2\n1248\n10.3\n\n\n\n1500万以上\n321\n2.3\n287\n2.4\n\n\n\nわからない・無回答\n4896\n35.8\n6365\n52.3\n\n\n出身階層\n上層ノンマニュアル\n5302\n38.7\n3962\n32.6\n\n\n\n被雇用者\n4411\n32.2\n3410\n28.0\n\n\n\n自営業・自由業\n1772\n12.9\n1220\n10.0\n\n\n\n農林水産業\n308\n2.2\n203\n1.7\n\n\n\n無職・年金金利生活者\n361\n2.6\n232\n1.9\n\n\n\n無回答\n1540\n11.2\n3140\n25.8"
  },
  {
    "objectID": "05_教育学研究/本文.html#付表2",
    "href": "05_教育学研究/本文.html#付表2",
    "title": "再現コード",
    "section": "付表2",
    "text": "付表2\n\n\nCode\ndf_seminar_AL |&gt; \n  select(勉強ダミー, 自習時間_大学, 学部, 入試形態, 性別, 奨学金有無, 親年収, 出身階層, 改革ダミー) |&gt;  \n  mutate(\n    勉強ダミー = factor(勉強ダミー),\n    改革ダミー = case_when(\n      改革ダミー == 0 ~ '改革前',\n      改革ダミー == 1 ~ '改革後'\n    )) |&gt;  \n  mutate(across(where(is.factor), \\(x) fct_na_value_to_level(x, level = '無回答') |&gt; fct_drop())) |&gt; \n  mutate(親年収 = fct_collapse(親年収, `わからない・無回答` = '無回答')) |&gt; \n  rename(`勉強・研究重点` = 勉強ダミー, `自習時間（大学関係）` = 自習時間_大学) |&gt; \n  datasummary_balance(\n    ~改革ダミー, data = _, output = 'html', dinm = F, \n    notes = str_glue('注：自習時間（大学関係）については、無回答であった{sum(is.na(df_seminar_AL$自習時間_大学))}ケース（{scales::percent(mean(is.na(df_seminar_AL$自習時間_大学)), accuracy = 0.1, suffix = \"％\")}）を除いて計算')\n  ) \n\n\n\n\n表 4: 改革前と改革後の記述統計（質的転換答申後）\n\n\n\n\n\n\n\n\n\n\n\n\n改革前 (N=10920)\n\n\n改革後 (N=6798)\n\n\n\n\n\nMean\nStd. Dev.\nMean\nStd. Dev.\n\n\n\n\n自習時間（大学関係）\n\n265.3\n304.0\n304.5\n336.6\n\n\n\n\nN\nPct.\nN\nPct.\n\n\n勉強・研究重点\n0\n8384\n76.8\n4986\n73.3\n\n\n\n1\n2392\n21.9\n1746\n25.7\n\n\n\n無回答\n144\n1.3\n66\n1.0\n\n\n学部\n文科系\n4505\n41.3\n2366\n34.8\n\n\n\n理科系\n5027\n46.0\n3432\n50.5\n\n\n\n医歯薬系\n1388\n12.7\n1000\n14.7\n\n\n入試形態\n一般入試\n9150\n83.8\n5616\n82.6\n\n\n\n推薦入試\n1653\n15.1\n1109\n16.3\n\n\n\nその他\n95\n0.9\n63\n0.9\n\n\n\n無回答\n22\n0.2\n10\n0.1\n\n\n性別\n男性\n5903\n54.1\n3652\n53.7\n\n\n\n女性\n4930\n45.1\n3034\n44.6\n\n\n\n無回答\n87\n0.8\n112\n1.6\n\n\n奨学金有無\n受給なし\n6703\n61.4\n4145\n61.0\n\n\n\n受給あり\n3585\n32.8\n2157\n31.7\n\n\n\n無回答\n632\n5.8\n496\n7.3\n\n\n親年収\n500万未満\n3026\n27.7\n1676\n24.7\n\n\n\n500万-749万\n1711\n15.7\n1018\n15.0\n\n\n\n750万-999万\n1250\n11.4\n837\n12.3\n\n\n\n1000万-1499万\n656\n6.0\n578\n8.5\n\n\n\n1500万以上\n172\n1.6\n137\n2.0\n\n\n\nわからない・無回答\n4105\n37.6\n2552\n37.5\n\n\n出身階層\n上層ノンマニュアル\n3817\n35.0\n2613\n38.4\n\n\n\n被雇用者\n4579\n41.9\n3008\n44.2\n\n\n\n自営業・自由業\n921\n8.4\n584\n8.6\n\n\n\n農林水産業\n161\n1.5\n76\n1.1\n\n\n\n無職・年金金利生活者\n658\n6.0\n228\n3.4\n\n\n\n無回答\n784\n7.2\n289\n4.3\n\n\n\n 注：自習時間（大学関係）については、無回答であった489ケース（2.8％）を除いて計算"
  }
]