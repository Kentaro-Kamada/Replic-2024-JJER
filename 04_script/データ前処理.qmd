```{r}
#| eval: false
#| filename: 04_script/データ前処理.qmd

library(tidyverse)
library(haven)
library(kamaken)

# データ読み込み -------------------------------------------------------------------------------------
# 30年分のデータを読み込み（年度でネストしておく）
data_list <- 
  tibble(
    year = c(1993, 1991, 1992, 1994:2020),
    path = list.files('01_rawdata/生協調査', full.names = T),
    # 年によってデータの文字コードが違うので注意
    enc = c(rep('cp932', 22), 
            'utf8', 'utf8', 'cp932', 'cp932', 
            'cp932', 'utf8', 'cp932', 'cp932'),
    data = map2(path, enc, ~read_sav(.x, encoding = .y))
  ) |> 
  select(year, data)

# 変数名の対応表を読み込み（年度でネストしておく）
rename_list <-
  read_csv('01_input/rename_list.csv') |> 
  pivot_longer(cols = -new, names_to = 'year', values_to = 'old', 
               names_transform = list(year = parse_integer)) |> 
  drop_na() |> 
  nest(namelist = c(-year))

# 変数ラベル・値ラベル
varlab <- read_csv('02_middle/varlab.csv')
vallab <- read_csv('02_middle/vallab.csv')


# 前処理 -----------------------------------------------------------------------------------------
# データセットと対応表をくっつける
data <-
  inner_join(
    data_list,
    rename_list,
    by = 'year'
  ) |> 
  # 変数選択＆リネーム
  mutate(data = map2(data, namelist, ~select(.x, set_names(.y$old, .y$new)))) |> 
  # ラベルをはがす
  mutate(data = map(data, zap_labels)) |> 
  select(year, data) |> 
  unnest(data) |> 
  # idを振る
  mutate(id = row_number()) |> 
  relocate(year, id)


# 大学コード ---------------------------------------------------------------------------------------
# 大学コード読み込み
daigaku_code <- read_csv('02_middle/年度別大学コード.csv')


df1 <-
  left_join(data, daigaku_code, by = c('year', '大学コード' = '値')) |> 
  # 大学のラベルを大学名にリコード，位置調整
  relocate(year, id, 大学名 = ラベル) |> 
  # いらなくなった大学コードを削除
  select(!大学コード)


# 年収 ----------------------------------------------------------------------------------
# 年によって年収のコーディングの仕方が異なる
# 1991〜2002までは実数値，2003は500万〜1500万のカテゴリ，2004〜は0〜1500万のカテゴリ，ただし2008〜2015は値が21〜29という謎仕様になっているので注意

# 2015年までは父母の職業と年収を聞いているが，2016年からは主な家計支持者は職業と年収およびその他家族の年収を聞くようになった
# 父母のうち年収の高い方を主な家計支持者とみなし，2016年以降のフォーマットにそろえる

df2 <-
  df1 |> 
  # select(year, id, matches('(_年収|_職業)$'),) |> 
  pivot_longer(cols = matches('(_年収|_職業)$'), names_to = c('who', '.value'), names_sep = '_') |> 
  # 年によって聞き方が異なる
  # 無回答・わからないを0にコード，あとは2003年のカテゴリに合わせる
  mutate(
    年収 = 
      case_when(
        year %in% 1991:2002 & (年収 == 9999 | is.na(年収)) ~ 0,
        year %in% 1991:2002 & 年収 < 500 ~ 1,
        year %in% 1991:2002 & 年収 >= 500 & 年収 < 750 ~ 2,
        year %in% 1991:2002 & 年収 >= 750 & 年収 < 1000 ~ 3,
        year %in% 1991:2002 & 年収 >= 1000 & 年収 < 1500 ~ 4,
        year %in% 1991:2002 & 年収 >= 1500 ~ 5,
        year == 2003 & (年収 == 6 | 年収 == 9 | is.na(年収)) ~ 0,
        year == 2003 & 年収 == 1 ~ 1,
        year == 2003 & 年収 == 2 ~ 2,
        year == 2003 & 年収 == 3 ~ 3,
        year == 2003 & 年収 == 4 ~ 4,
        year == 2003 & 年収 == 5 ~ 5,
        year %in% c(2004:2007, 2016:2020) & (年収 == 9 | 年収 == 99 | is.na(年収)) ~ 0,
        year %in% c(2004:2007, 2016:2020) & 年収 %in% 1:4 ~ 1,
        year %in% c(2004:2007, 2016:2020) & 年収 == 5 ~ 2,
        year %in% c(2004:2007, 2016:2020) & 年収 == 6 ~ 3,
        year %in% c(2004:2007, 2016:2020) & 年収 == 7 ~ 4,
        year %in% c(2004:2007, 2016:2020) & 年収 == 8 ~ 5,
        year %in% 2008:2015 & (年収 == 29 | 年収 == 99 | is.na(年収)) ~ 0,
        year %in% 2008:2015 & 年収  %in%  21:24 ~ 1,
        year %in% 2008:2015 & 年収 == 25 ~ 2,
        year %in% 2008:2015 & 年収 == 26 ~ 3,
        year %in% 2008:2015 & 年収 == 27 ~ 4,
        year %in% 2008:2015 & 年収 == 28 ~ 5,
        TRUE ~ NA_real_),
    職業 = 
      case_when(
        year %in% 1991:2003 & 職業 == 1 ~ '公務員非管理職',
        year %in% 1991:2003 & 職業 == 2 ~ '公務員管理職',
        year %in% 1991:2003 & 職業 == 3 ~ '中小企業非管理職',
        year %in% 1991:2003 & 職業 == 4 ~ '中小企業管理職',
        year %in% 1991:2003 & 職業 == 5 ~ '大企業非管理職',
        year %in% 1991:2003 & 職業 == 6 ~ '大企業管理職',
        year %in% 1991:2003 & 職業 == 7 ~ '団体役員・職員・私立学校教職員',
        year %in% 1991:2003 & 職業 == 8 ~ '中小企業経営者',
        year %in% 1991:2003 & 職業 == 9 ~ '自営業',
        year %in% 1991:2003 & 職業 == 10 ~ '農林水産業',
        year %in% 1991:2003 & 職業 == 11 ~ '自由業',
        year %in% 1991:2003 & 職業 == 12 ~ 'その他職業',
        year %in% 1991:2003 & 職業 == 13 ~ '年金金利生活者',
        year %in% 1991:2003 & 職業 == 14 ~ '無職',
        year %in% 1991:2003 & 職業 == 15 ~ 'パート',
        year %in% 1991:2003 & (職業 == 99 | is.na(職業)) ~ '無回答',
        year %in% 2004:2020 & 職業 == 1 ~ '公務員非管理職',
        year %in% 2004:2020 & 職業 == 2 ~ '公務員管理職',
        year %in% 2004:2020 & 職業 == 3 ~ '中小企業非管理職',
        year %in% 2004:2020 & 職業 == 4 ~ '中小企業管理職',
        year %in% 2004:2020 & 職業 == 5 ~ '大企業非管理職',
        year %in% 2004:2020 & 職業 == 6 ~ '大企業管理職',
        year %in% 2004:2020 & 職業 == 7 ~ '団体役員・職員・私立学校教職員',
        year %in% 2004:2020 & 職業 == 8 ~ '中小企業経営者',
        year %in% 2004:2020 & 職業 == 9 ~ '自営業',
        year %in% 2004:2020 & 職業 == 10 ~ '農林水産業',
        year %in% 2004:2020 & 職業 == 11 ~ '自由業',
        year %in% 2004:2020 & 職業 == 12 ~ 'その他職業',
        year %in% 2004:2020 & 職業 == 13 ~ 'パート',
        year %in% 2004:2020 & 職業 == 14 ~ '年金金利生活者',
        year %in% 2004:2020 & 職業 == 15 ~ '無職',
        year %in% 2004:2020 & (職業 == 99 | is.na(職業)) ~ '無回答',
        TRUE ~ NA_character_
      )) |> 
  pivot_wider(names_from = who, names_glue = '{who}_{.value}', values_from = c(職業, 年収)) |> 
  # 父と母で年収カテゴリの高い方を主な家計支持者とする
  mutate(
    家計支持者 = 
      case_when(
        year %in% 1991:2015 & 父_年収 >= 母_年収 ~ '父',
        year %in% 1991:2015 & 母_年収 > 父_年収 ~ '母',
        TRUE ~ '主な家計支持者'),
    親年収 = 
      case_when(
        家計支持者 == '父' ~ 父_年収,
        家計支持者 == '母' ~ 母_年収,
        TRUE ~ 主な家計支持者_年収),
    親職業 = 
      case_when(
        家計支持者 == '父' ~ 父_職業,
        家計支持者 == '母' ~ 母_職業,
        TRUE ~ 主な家計支持者_職業),
  ) |> 
  # カテゴリ化
  mutate(
    親年収 = factor(
      親年収, levels = 0:5, 
      labels = c('わからない・無回答', '500万未満', '500万-749万', '750万-999万', '1000万-1499万', '1500万以上')
    ),
    親職業 = factor(親職業) |> fct_relevel('大企業管理職')
  ) |> 
  # いらない変数削除
  select(!c(matches('^(父|母|主な家計支持者|その他家族)_(年収|職業)$'), 家計支持者))



# そのほかの変数のリコード --------------------------------------------------------------------------------


df3 <-
  df2 |> 
  # 変数のリコード
  mutate(
    学部 = 
      case_when(
        学部 == 1 ~ '文科系',
        学部 == 2 ~ '理科系',
        学部 == 3 ~ '医歯薬系',
        学部 == 4 ~ 'その他',
        TRUE ~ NA_character_
      ) |> fct_infreq(),
    入試形態 = 
      case_when(
        入試形態 == 1 ~ '一般入試',
        year %in% 1991:2002 & 入試形態 == 3 ~ '内部進学',
        year == 2003 & 入試形態 == 7 ~ '内部進学',
        year %in% 2004:2019 & 入試形態 == 4 ~ '内部進学',
        year == 2020 & 入試形態 == 3 ~ '内部進学',
        year %in% 1991:2002 & 入試形態 == 2 ~ '推薦入試',
        year == 2003 & 入試形態 %in% c(2, 3, 5, 6) ~ '推薦入試',
        year %in% 2004:2019 & 入試形態 %in% c(2, 3, 5, 6) ~ '推薦入試',
        year == 2020 & 入試形態 %in% c(2, 4, 5, 6) ~ '推薦入試',
        year %in% 1991:2002 & 入試形態 == 4 ~ 'その他',
        year == 2003 & 入試形態 %in% c(4, 8, 9, 10, 11, 12) ~ 'その他',
        year %in% 2004:2019 & 入試形態 %in% c(7, 8, 9, 10, 11) ~ 'その他',
        year == 2020 & 入試形態 %in% c(7, 8, 9, 10, 11) ~ 'その他',
        TRUE ~ NA_character_
      ) |> fct_infreq(),
    学年 = 
      case_when(
        year %in% 1991:2015 & 学年 == 1 ~ '1年',
        year %in% 1991:2015 & 学年 == 2 ~ '2年',
        year %in% 1991:2015 & 学年 == 3 ~ '3年',
        year %in% 1991:2015 & 学年 == 4 ~ '4年以上',
        year %in% 2016:2020 & 学年 == 1 ~ '1年',
        year %in% 2016:2020 & 学年 == 2 ~ '2年',
        year %in% 2016:2020 & 学年 == 3 ~ '3年',
        year %in% 2016:2020 & 学年 %in% 4:6 ~ '4年以上',
        TRUE ~ NA_character_
      ) |> factor(),
    性別 = 
      case_when(
        year %in% 1991:2017 & 性別 %in% 1:2 ~ '男性',
        year %in% 1991:2017 & 性別 %in% 3:4 ~ '女性',
        year %in% 2018:2020 & 性別 == 1 ~ '男性',
        year %in% 2018:2020 & 性別 == 2 ~ '女性',
        TRUE ~ NA_character_
      ) |> fct_relevel('男性'),
    大学生活重点 = 
      case_when(
        大学生活重点 == 1 ~ '勉強や研究',
        大学生活重点 == 2 ~ 'サークル',
        大学生活重点 == 3 ~ '趣味',
        大学生活重点 == 4 ~ '人間関係',
        大学生活重点 == 5 ~ '資格取得',
        大学生活重点 == 6 ~ 'アルバイト',
        大学生活重点 == 7 ~ '重点なくほどほど',
        大学生活重点 == 8 ~ 'なんとなくすぎる生活',
        year != 2020 & 大学生活重点 == 9 ~ 'その他',
        year == 2020 & 大学生活重点 == 9 ~ NA_character_,
        大学生活重点 == 10 ~ 'その他',
        TRUE ~ NA_character_) |> 
      fct_infreq(),
    across(
      c(大学選択理由_1, 大学選択理由_2),
      ~{case_when(
        . == 1 ~ '学びたい専門がある',
        . == 2 ~ '学力にあっている',
        . == 3 ~ '雰囲気が合っていそう',
        . == 4 ~ '通学に便利',
        . == 5 ~ '有名',
        . == 6 ~ '就職に有利',
        . == 7 ~ '学費が安い',
        . == 8 ~ 'ここしか受からなかった',
        between(year, 2004, 2006) & . == 9 ~ 'その他',
        between(year, 2007, 2020) & . == 9 ~ '附属高校に通っていた',
        between(year, 2004, 2006) & . == 10 ~ NA_character_,
        between(year, 2007, 2020) & . == 10 ~ '家族などのすすめ',
        between(year, 2007, 2019) & . == 11 ~ 'その他',
        year == 2020 & . == 11 ~ 'スポーツができる',
        year == 2020 & . == 12 ~ 'その他',
        TRUE ~ NA_character_
      )}
    ),
    アルバイト経験 = case_when(
      year %in% 2005:2020 & アルバイト経験 == 2 ~ 'なし',
      year %in% 1991:2004 & アルバイト経験 == 0 ~ 'なし',
      アルバイト経験 == 1 ~ 'あり',
      .default = NA
    ),
    奨学金収入 = case_when(
      year %in% 1991:2017 ~ 奨学金収入 / 100,
      year %in% 2018:2020 ~ 奨学金収入 / 10000,
      .default = NA
    ),
    奨学金有無 = case_when(
      奨学金収入 == 0 ~ '受給なし',
      is.na(奨学金収入) ~ NA,
      .default = '受給あり'
    ) |> fct_relevel('受給なし', '受給あり'),
    across(
      c(自習時間_大学_分, 自習時間_大学以外_分),
      ~{case_when(
        year %in% 2014:2020 & between(., 0, 59) ~ .,
        year %in% 2012:2013 ~ .,
        TRUE ~ NA_real_)}
    ),
    across(
      c(自習時間_大学_時, 自習時間_大学以外_時),
      ~{case_when(
        year %in% 2014:2020 & . != 999 ~ .,
        year %in% 2012:2013 ~ .,
        TRUE ~ NA_real_)}
    ),
    自習時間_大学 = 
      case_when(
        year %in% 2012:2013 ~ 自習時間_大学_分,
        year %in% 2014:2020 ~ 自習時間_大学_時*60 + 自習時間_大学_分,
        TRUE ~ NA_real_
      ),
    自習時間_大学以外 = 
      case_when(
        year %in% 2012:2013 ~ 自習時間_大学以外_分,
        year %in% 2014:2020 ~ 自習時間_大学以外_時*60 + 自習時間_大学以外_分,
        TRUE ~ NA_real_
      )
  ) |> 
  select(!c(自習時間_大学_分:自習時間_大学以外_時))

# 保存
write_rds(df3, '02_middle/corp.rds')


```
